"""IMDb Movies India

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oGcToFwsq7L7U8E12-AMz37fFBF18n3x
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
df_movie = pd.read_csv('/content/IMDb Movies India.csv', encoding='ISO-8859-1')
df_movie

#Explore Data
print(df_movie.info())

# Find the Missing Values
missing_values = df_movie.isnull().sum()
print(missing_values)

# Data Preprocessing

#handle missing values


# Fill Year with mode
df_movie['Year'].fillna(df_movie['Year'].mode()[0], inplace=True)

# Fill Duration with mode
df_movie['Duration'].fillna(df_movie['Duration'].mode()[0], inplace=True)

# Convert Votes to numeric after removing commas
df_movie['Votes'] = df_movie['Votes'].str.replace(',', '', regex=False)
df_movie['Votes'] = pd.to_numeric(df_movie['Votes'], errors='coerce')
df_movie['Votes'] = df_movie['Votes'].fillna(df_movie['Votes'].mean())

# Fill Genre, Director, Actors with mode
df_movie['Genre'].fillna(df_movie['Genre'].mode()[0], inplace=True)
df_movie['Director'].fillna(df_movie['Director'].mode()[0], inplace=True)
df_movie['Actor 1'].fillna(df_movie['Actor 1'].mode()[0], inplace=True)
df_movie['Actor 2'].fillna(df_movie['Actor 2'].mode()[0], inplace=True)
df_movie['Actor 3'].fillna(df_movie['Actor 3'].mode()[0], inplace=True)

# Fill Rating with mode (or mean)
df_movie['Rating'].fillna(df_movie['Rating'].mode()[0], inplace=True)


df_movie

#Feature Engineering
df_movie['Cast']=df_movie['Actor 1']+'  '+df_movie['Actor 2']+'  '+df_movie['Actor 3']
df_movie=df_movie.drop(['Actor 1','Actor 2','Actor 3'],axis=1)
df_movie

df_movie['Cast_List'] = df_movie['Cast'].str.split(' ')
df_exploded = df_movie.explode('Cast_List')

# Data Visualisation
# Count plot for top genres
plt.figure(figsize=(12, 8))
sns.countplot(data=df_movie, x='Genre', order=df_movie['Genre'].value_counts().index[:10])  # Top 10 genres
plt.title('Top 10 Movie Genres')
plt.xticks(rotation=90)
plt.xlabel('Genre')
plt.ylabel('Count')
plt.show()

#Genre vs Ratings
df_movie['Genre_List'] = df_movie['Genre'].str.split(', ')
df_exploded = df_movie.explode('Genre_List')


# Group by genre and calculate the average rating
genre_ratings = df_exploded.groupby('Genre_List')['Rating'].mean().reset_index()

# Sort by average rating in descending order
top_rated_genres = genre_ratings.sort_values(by='Rating', ascending=False)

# Get the highest-rated genre
highest_rated_genre = top_rated_genres.iloc[0]['Genre_List']

print(f"The highest-rated genre is: {highest_rated_genre}")
print('\n')
print('\n')

import matplotlib.pyplot as plt
import seaborn as sns

# Assuming you have already calculated 'genre_ratings' as in the previous response

# Create a bar plot
plt.figure(figsize=(12, 6))
sns.barplot(x='Genre_List', y='Rating', data=genre_ratings.head(10), palette='viridis')
plt.title('Top 10 Highest-Rated Genres')
plt.xlabel('Genre')
plt.ylabel('Average Rating')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Count plot for the top 10 directors
plt.figure(figsize=(12, 8))
sns.countplot(data=df_movie, x='Director', order=df_movie['Director'].value_counts().index[:10])  # Top 10 directors
plt.title('Top 10 Movie Directors')
plt.xticks(rotation=90)
plt.xlabel('Director')
plt.ylabel('Count')
plt.show()

# Durector vs Ratings
df_movie['Director_List'] = df_movie['Director'].str.split(', ')
df_exploded = df_movie.explode('Director_List')


# Group by genre and calculate the average rating
Director_ratings = df_exploded.groupby('Director_List')['Rating'].mean().reset_index()

# Sort by average rating in descending order
top_rated_Director = Director_ratings.sort_values(by='Rating', ascending=False)

# Get the highest-rated genre
highest_rated_Director = top_rated_Director.iloc[0]['Director_List']

print(f"The highest-rated Director is: {highest_rated_Director}")
print('\n')
print('\n')

import matplotlib.pyplot as plt
import seaborn as sns

# Bar plot for top 10 highest-rated directors
plt.figure(figsize=(12, 6))
sns.barplot(data=top_rated_Director.head(10), x='Director_List', y='Rating', palette='viridis')
plt.title('Top 10 Highest-Rated Directors')
plt.xlabel('Director')
plt.ylabel('Average Rating')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

df_movie['Cast_List'] = df_movie['Cast'].str.split(', ')
df_exploded = df_movie.explode('Cast_List')


# Group by genre and calculate the average rating
Cast_ratings = df_exploded.groupby('Cast_List')['Rating'].mean().reset_index()

# Sort by average rating in descending order
top_rated_Cast = Cast_ratings.sort_values(by='Rating', ascending=False)

# Get the highest-rated genre
highest_rated_Cast = top_rated_Cast.iloc[0]['Cast_List']

print(f"The highest-rated Cast is: {highest_rated_Cast}")
print('\n')
print('\n')

import matplotlib.pyplot as plt
import seaborn as sns

# Bar plot for top 10 highest-rated directors
plt.figure(figsize=(12, 6))
sns.barplot(data=top_rated_Cast.head(10), x='Cast_List', y='Rating', palette='viridis')
plt.title('Top 10 Highest-Rated Cast')
plt.xlabel('Cast')
plt.ylabel('Average Rating')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Encode 'Genre' and 'Director'

from sklearn.preprocessing import LabelEncoder

label_genre = LabelEncoder()
label_director = LabelEncoder()
label_Cast = LabelEncoder()


df_movie['Genre_encoded'] = label_genre.fit_transform(df_movie['Genre'])
df_movie['Director_encoded'] = label_director.fit_transform(df_movie['Director'])
df_movie['Cast_encoded'] = label_Cast.fit_transform(df_movie['Cast'])

X = df_movie[['Cast_encoded', 'Genre_encoded', 'Director_encoded']]
y = df_movie['Rating']
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression

# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
predictions = model.predict(X_test)
print(predictions)
print('\n')
print('\n')
print('\n')
import matplotlib.pyplot as plt

# Plotting actual vs predicted ratings
plt.figure(figsize=(10, 6))
plt.scatter(y_test, predictions, color='blue', alpha=0.6)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')  # Ideal line
plt.xlabel('Actual Ratings')
plt.ylabel('Predicted Ratings')
plt.title('Actual vs Predicted Ratings')
plt.show()

"""This scatter plot will help you visualize how closely the predicted ratings align with the actual ratings. If the points are close to the red dashed line, it indicates that the predictions are very close to the actual values.

### Conclusion in Simple Points:

1. **Best Genre**: Documentary movies got the highest ratings.

2. **Best Director**: Saif Ali Sayeed is the highest-rated director.

3. **Best Cast**: The cast of Ahaan Jha, Mahesh Narayan, and Rajasree Rajakumari had the highest ratings.

4. **Model Accuracy**: The predictions were close to the actual ratings, showing the model worked well.

5. **Important Features**: Genre, director, and cast play a big role in movie ratings.

6. **Prediction Model**: The Linear Regression model can predict ratings based on these features.

7. **Overall Insight**: The project shows that the director and cast have a big influence on movie ratings and helps predict future ratings.
"""
